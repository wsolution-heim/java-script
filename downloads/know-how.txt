currentResult = currentResult + 10; 
// Die rechte Seite wird zuerst ausgeführt, diese dann der Linke zugewiesen


Infos über Strings:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Escape_notation

`(${variable} + 10)`
let calculationDescription = `(${defaultResult} + 10) / 3 *2 - 4`; 
Backticks ermöglichen es mit ${variablenname} eine variable in einem String auszugeben


https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals
Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them. They were called "template strings" in prior editions of the ES2015 specification

\n --> Zeilenumbruch in einem String




FUNCTION ==> Code on Demand

Nach einer Function KEIN SEMICOLON!!!!!
nach einem ausfürenden Code {} -- niemals Semikolon!!

Strings always have to be in one line (or split into multiple strings, concatenated via +).

function add(num1, num2) {
	const result = num1 + num2;
	return result;
}
eine Funktion kann auch mittels return result; einer variable zugewiesen werden
currentResult = add(5, 15);



You CAN'T use local/black-scope variables (= declared inside of functions) OUTSIDE of them!

return XXX --> beendet eine Funktion, alles was danach kommt, wird nicht ausgeführt


addBtn.addEventListener('click', add);
==> wenn der Button geklickt wurde, suche die Funktion add und führe dies aus!

